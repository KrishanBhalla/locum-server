// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package spec

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// DeleteFollowerRequest defines model for DeleteFollowerRequest.
type DeleteFollowerRequest struct {
	FollowerUserId string `json:"followerUserId"`
	UserId         string `json:"userId"`
}

// DeleteFollowingRequest defines model for DeleteFollowingRequest.
type DeleteFollowingRequest struct {
	FollowingUserId string `json:"followingUserId"`
	UserId          string `json:"userId"`
}

// FindFriendsRequest defines model for FindFriendsRequest.
type FindFriendsRequest struct {
	UserId string `json:"userId"`
}

// FindFriendsResponse defines model for FindFriendsResponse.
type FindFriendsResponse = []UserResponse

// FollowRequestRequest defines model for FollowRequestRequest.
type FollowRequestRequest struct {
	FollowingUserId string `json:"followingUserId"`
	UserId          string `json:"userId"`
}

// FollowResponseRequest defines model for FollowResponseRequest.
type FollowResponseRequest struct {
	Accept                  bool   `json:"accept"`
	RequestedFollowerUserId string `json:"requestedFollowerUserId"`
	UserId                  string `json:"userId"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    *string `json:"email,omitempty"`
	FullName *string `json:"fullName,omitempty"`
	UserId   string  `json:"userId"`
}

// UpdateFollowedUserLocationsRequest defines model for UpdateFollowedUserLocationsRequest.
type UpdateFollowedUserLocationsRequest struct {
	UserId string `json:"userId"`
}

// UpdateFollowedUserLocationsResponse defines model for UpdateFollowedUserLocationsResponse.
type UpdateFollowedUserLocationsResponse = []UserLocation

// UserLocation The location of a user with a timestamp given in epoch millis
type UserLocation struct {
	Latitude  float32 `json:"latitude"`
	Longitude float32 `json:"longitude"`
	Timestamp int64   `json:"timestamp"`
	UserId    string  `json:"userId"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	QueryString string `json:"queryString"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	FullName string `json:"fullName"`
	UserId   string `json:"userId"`
}

// CreateFollowRequestJSONRequestBody defines body for CreateFollowRequest for application/json ContentType.
type CreateFollowRequestJSONRequestBody = FollowRequestRequest

// UpdateFollowRequestJSONRequestBody defines body for UpdateFollowRequest for application/json ContentType.
type UpdateFollowRequestJSONRequestBody = FollowResponseRequest

// DeleteFollowerJSONRequestBody defines body for DeleteFollower for application/json ContentType.
type DeleteFollowerJSONRequestBody = DeleteFollowerRequest

// FindFollowersJSONRequestBody defines body for FindFollowers for application/json ContentType.
type FindFollowersJSONRequestBody = FindFriendsRequest

// FindFollowerRequestsJSONRequestBody defines body for FindFollowerRequests for application/json ContentType.
type FindFollowerRequestsJSONRequestBody = FindFriendsRequest

// DeleteFollowingJSONRequestBody defines body for DeleteFollowing for application/json ContentType.
type DeleteFollowingJSONRequestBody = DeleteFollowingRequest

// FindFollowingJSONRequestBody defines body for FindFollowing for application/json ContentType.
type FindFollowingJSONRequestBody = FindFriendsRequest

// UpdateLocationsOfFollowedUsersJSONRequestBody defines body for UpdateLocationsOfFollowedUsers for application/json ContentType.
type UpdateLocationsOfFollowedUsersJSONRequestBody = UpdateFollowedUserLocationsRequest

// LoginOrSignupJSONRequestBody defines body for LoginOrSignup for application/json ContentType.
type LoginOrSignupJSONRequestBody = LoginRequest

// FindUsersJSONRequestBody defines body for FindUsers for application/json ContentType.
type FindUsersJSONRequestBody = UserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /follow/request)
	CreateFollowRequest(w http.ResponseWriter, r *http.Request)

	// (POST /follow/response)
	UpdateFollowRequest(w http.ResponseWriter, r *http.Request)

	// (DELETE /followers)
	DeleteFollower(w http.ResponseWriter, r *http.Request)

	// (POST /followers)
	FindFollowers(w http.ResponseWriter, r *http.Request)

	// (POST /followers/requests)
	FindFollowerRequests(w http.ResponseWriter, r *http.Request)

	// (DELETE /following)
	DeleteFollowing(w http.ResponseWriter, r *http.Request)

	// (POST /following)
	FindFollowing(w http.ResponseWriter, r *http.Request)

	// (POST /following/locations)
	UpdateLocationsOfFollowedUsers(w http.ResponseWriter, r *http.Request)

	// (POST /login)
	LoginOrSignup(w http.ResponseWriter, r *http.Request)

	// (POST /users)
	FindUsers(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /follow/request)
func (_ Unimplemented) CreateFollowRequest(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /follow/response)
func (_ Unimplemented) UpdateFollowRequest(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /followers)
func (_ Unimplemented) DeleteFollower(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /followers)
func (_ Unimplemented) FindFollowers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /followers/requests)
func (_ Unimplemented) FindFollowerRequests(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /following)
func (_ Unimplemented) DeleteFollowing(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /following)
func (_ Unimplemented) FindFollowing(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /following/locations)
func (_ Unimplemented) UpdateLocationsOfFollowedUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /login)
func (_ Unimplemented) LoginOrSignup(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /users)
func (_ Unimplemented) FindUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateFollowRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateFollowRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFollowRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateFollowRequest operation middleware
func (siw *ServerInterfaceWrapper) UpdateFollowRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFollowRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFollower operation middleware
func (siw *ServerInterfaceWrapper) DeleteFollower(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFollower(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindFollowers operation middleware
func (siw *ServerInterfaceWrapper) FindFollowers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindFollowers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindFollowerRequests operation middleware
func (siw *ServerInterfaceWrapper) FindFollowerRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindFollowerRequests(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFollowing operation middleware
func (siw *ServerInterfaceWrapper) DeleteFollowing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFollowing(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindFollowing operation middleware
func (siw *ServerInterfaceWrapper) FindFollowing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindFollowing(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateLocationsOfFollowedUsers operation middleware
func (siw *ServerInterfaceWrapper) UpdateLocationsOfFollowedUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLocationsOfFollowedUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LoginOrSignup operation middleware
func (siw *ServerInterfaceWrapper) LoginOrSignup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginOrSignup(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindUsers operation middleware
func (siw *ServerInterfaceWrapper) FindUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/follow/request", wrapper.CreateFollowRequest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/follow/response", wrapper.UpdateFollowRequest)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/followers", wrapper.DeleteFollower)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/followers", wrapper.FindFollowers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/followers/requests", wrapper.FindFollowerRequests)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/following", wrapper.DeleteFollowing)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/following", wrapper.FindFollowing)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/following/locations", wrapper.UpdateLocationsOfFollowedUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.LoginOrSignup)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.FindUsers)
	})

	return r
}

type CreateFollowRequestRequestObject struct {
	Body *CreateFollowRequestJSONRequestBody
}

type CreateFollowRequestResponseObject interface {
	VisitCreateFollowRequestResponse(w http.ResponseWriter) error
}

type CreateFollowRequest200Response struct {
}

func (response CreateFollowRequest200Response) VisitCreateFollowRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateFollowRequestdefaultResponse struct {
	StatusCode int
}

func (response CreateFollowRequestdefaultResponse) VisitCreateFollowRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UpdateFollowRequestRequestObject struct {
	Body *UpdateFollowRequestJSONRequestBody
}

type UpdateFollowRequestResponseObject interface {
	VisitUpdateFollowRequestResponse(w http.ResponseWriter) error
}

type UpdateFollowRequest200Response struct {
}

func (response UpdateFollowRequest200Response) VisitUpdateFollowRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateFollowRequestdefaultResponse struct {
	StatusCode int
}

func (response UpdateFollowRequestdefaultResponse) VisitUpdateFollowRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeleteFollowerRequestObject struct {
	Body *DeleteFollowerJSONRequestBody
}

type DeleteFollowerResponseObject interface {
	VisitDeleteFollowerResponse(w http.ResponseWriter) error
}

type DeleteFollower204Response struct {
}

func (response DeleteFollower204Response) VisitDeleteFollowerResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteFollowerdefaultResponse struct {
	StatusCode int
}

func (response DeleteFollowerdefaultResponse) VisitDeleteFollowerResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type FindFollowersRequestObject struct {
	Body *FindFollowersJSONRequestBody
}

type FindFollowersResponseObject interface {
	VisitFindFollowersResponse(w http.ResponseWriter) error
}

type FindFollowers200JSONResponse FindFriendsResponse

func (response FindFollowers200JSONResponse) VisitFindFollowersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindFollowersdefaultResponse struct {
	StatusCode int
}

func (response FindFollowersdefaultResponse) VisitFindFollowersResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type FindFollowerRequestsRequestObject struct {
	Body *FindFollowerRequestsJSONRequestBody
}

type FindFollowerRequestsResponseObject interface {
	VisitFindFollowerRequestsResponse(w http.ResponseWriter) error
}

type FindFollowerRequests200JSONResponse FindFriendsResponse

func (response FindFollowerRequests200JSONResponse) VisitFindFollowerRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindFollowerRequestsdefaultResponse struct {
	StatusCode int
}

func (response FindFollowerRequestsdefaultResponse) VisitFindFollowerRequestsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeleteFollowingRequestObject struct {
	Body *DeleteFollowingJSONRequestBody
}

type DeleteFollowingResponseObject interface {
	VisitDeleteFollowingResponse(w http.ResponseWriter) error
}

type DeleteFollowing204Response struct {
}

func (response DeleteFollowing204Response) VisitDeleteFollowingResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteFollowingdefaultResponse struct {
	StatusCode int
}

func (response DeleteFollowingdefaultResponse) VisitDeleteFollowingResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type FindFollowingRequestObject struct {
	Body *FindFollowingJSONRequestBody
}

type FindFollowingResponseObject interface {
	VisitFindFollowingResponse(w http.ResponseWriter) error
}

type FindFollowing200JSONResponse FindFriendsResponse

func (response FindFollowing200JSONResponse) VisitFindFollowingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindFollowingdefaultResponse struct {
	StatusCode int
}

func (response FindFollowingdefaultResponse) VisitFindFollowingResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UpdateLocationsOfFollowedUsersRequestObject struct {
	Body *UpdateLocationsOfFollowedUsersJSONRequestBody
}

type UpdateLocationsOfFollowedUsersResponseObject interface {
	VisitUpdateLocationsOfFollowedUsersResponse(w http.ResponseWriter) error
}

type UpdateLocationsOfFollowedUsers200JSONResponse UpdateFollowedUserLocationsResponse

func (response UpdateLocationsOfFollowedUsers200JSONResponse) VisitUpdateLocationsOfFollowedUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLocationsOfFollowedUsersdefaultResponse struct {
	StatusCode int
}

func (response UpdateLocationsOfFollowedUsersdefaultResponse) VisitUpdateLocationsOfFollowedUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type LoginOrSignupRequestObject struct {
	Body *LoginOrSignupJSONRequestBody
}

type LoginOrSignupResponseObject interface {
	VisitLoginOrSignupResponse(w http.ResponseWriter) error
}

type LoginOrSignup200Response struct {
}

func (response LoginOrSignup200Response) VisitLoginOrSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type LoginOrSignupdefaultResponse struct {
	StatusCode int
}

func (response LoginOrSignupdefaultResponse) VisitLoginOrSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type FindUsersRequestObject struct {
	Body *FindUsersJSONRequestBody
}

type FindUsersResponseObject interface {
	VisitFindUsersResponse(w http.ResponseWriter) error
}

type FindUsers200JSONResponse []UserResponse

func (response FindUsers200JSONResponse) VisitFindUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindUsersdefaultResponse struct {
	StatusCode int
}

func (response FindUsersdefaultResponse) VisitFindUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /follow/request)
	CreateFollowRequest(ctx context.Context, request CreateFollowRequestRequestObject) (CreateFollowRequestResponseObject, error)

	// (POST /follow/response)
	UpdateFollowRequest(ctx context.Context, request UpdateFollowRequestRequestObject) (UpdateFollowRequestResponseObject, error)

	// (DELETE /followers)
	DeleteFollower(ctx context.Context, request DeleteFollowerRequestObject) (DeleteFollowerResponseObject, error)

	// (POST /followers)
	FindFollowers(ctx context.Context, request FindFollowersRequestObject) (FindFollowersResponseObject, error)

	// (POST /followers/requests)
	FindFollowerRequests(ctx context.Context, request FindFollowerRequestsRequestObject) (FindFollowerRequestsResponseObject, error)

	// (DELETE /following)
	DeleteFollowing(ctx context.Context, request DeleteFollowingRequestObject) (DeleteFollowingResponseObject, error)

	// (POST /following)
	FindFollowing(ctx context.Context, request FindFollowingRequestObject) (FindFollowingResponseObject, error)

	// (POST /following/locations)
	UpdateLocationsOfFollowedUsers(ctx context.Context, request UpdateLocationsOfFollowedUsersRequestObject) (UpdateLocationsOfFollowedUsersResponseObject, error)

	// (POST /login)
	LoginOrSignup(ctx context.Context, request LoginOrSignupRequestObject) (LoginOrSignupResponseObject, error)

	// (POST /users)
	FindUsers(ctx context.Context, request FindUsersRequestObject) (FindUsersResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CreateFollowRequest operation middleware
func (sh *strictHandler) CreateFollowRequest(w http.ResponseWriter, r *http.Request) {
	var request CreateFollowRequestRequestObject

	var body CreateFollowRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFollowRequest(ctx, request.(CreateFollowRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFollowRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFollowRequestResponseObject); ok {
		if err := validResponse.VisitCreateFollowRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFollowRequest operation middleware
func (sh *strictHandler) UpdateFollowRequest(w http.ResponseWriter, r *http.Request) {
	var request UpdateFollowRequestRequestObject

	var body UpdateFollowRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFollowRequest(ctx, request.(UpdateFollowRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFollowRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFollowRequestResponseObject); ok {
		if err := validResponse.VisitUpdateFollowRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFollower operation middleware
func (sh *strictHandler) DeleteFollower(w http.ResponseWriter, r *http.Request) {
	var request DeleteFollowerRequestObject

	var body DeleteFollowerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFollower(ctx, request.(DeleteFollowerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFollower")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFollowerResponseObject); ok {
		if err := validResponse.VisitDeleteFollowerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindFollowers operation middleware
func (sh *strictHandler) FindFollowers(w http.ResponseWriter, r *http.Request) {
	var request FindFollowersRequestObject

	var body FindFollowersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindFollowers(ctx, request.(FindFollowersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindFollowers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindFollowersResponseObject); ok {
		if err := validResponse.VisitFindFollowersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindFollowerRequests operation middleware
func (sh *strictHandler) FindFollowerRequests(w http.ResponseWriter, r *http.Request) {
	var request FindFollowerRequestsRequestObject

	var body FindFollowerRequestsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindFollowerRequests(ctx, request.(FindFollowerRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindFollowerRequests")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindFollowerRequestsResponseObject); ok {
		if err := validResponse.VisitFindFollowerRequestsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFollowing operation middleware
func (sh *strictHandler) DeleteFollowing(w http.ResponseWriter, r *http.Request) {
	var request DeleteFollowingRequestObject

	var body DeleteFollowingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFollowing(ctx, request.(DeleteFollowingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFollowing")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFollowingResponseObject); ok {
		if err := validResponse.VisitDeleteFollowingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindFollowing operation middleware
func (sh *strictHandler) FindFollowing(w http.ResponseWriter, r *http.Request) {
	var request FindFollowingRequestObject

	var body FindFollowingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindFollowing(ctx, request.(FindFollowingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindFollowing")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindFollowingResponseObject); ok {
		if err := validResponse.VisitFindFollowingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateLocationsOfFollowedUsers operation middleware
func (sh *strictHandler) UpdateLocationsOfFollowedUsers(w http.ResponseWriter, r *http.Request) {
	var request UpdateLocationsOfFollowedUsersRequestObject

	var body UpdateLocationsOfFollowedUsersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateLocationsOfFollowedUsers(ctx, request.(UpdateLocationsOfFollowedUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateLocationsOfFollowedUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateLocationsOfFollowedUsersResponseObject); ok {
		if err := validResponse.VisitUpdateLocationsOfFollowedUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoginOrSignup operation middleware
func (sh *strictHandler) LoginOrSignup(w http.ResponseWriter, r *http.Request) {
	var request LoginOrSignupRequestObject

	var body LoginOrSignupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginOrSignup(ctx, request.(LoginOrSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginOrSignup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginOrSignupResponseObject); ok {
		if err := validResponse.VisitLoginOrSignupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindUsers operation middleware
func (sh *strictHandler) FindUsers(w http.ResponseWriter, r *http.Request) {
	var request FindUsersRequestObject

	var body FindUsersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindUsers(ctx, request.(FindUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindUsersResponseObject); ok {
		if err := validResponse.VisitFindUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
