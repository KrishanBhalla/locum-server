// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package spec

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// DeleteFriendRequest defines model for DeleteFriendRequest.
type DeleteFriendRequest struct {
	FriendId string `json:"friendId"`
}

// FindFriendsResponse defines model for FindFriendsResponse.
type FindFriendsResponse = []UserResponse

// FriendRequestRequest defines model for FriendRequestRequest.
type FriendRequestRequest struct {
	FriendId string `json:"friendId"`
}

// FriendResponseRequest defines model for FriendResponseRequest.
type FriendResponseRequest struct {
	Accept   bool   `json:"accept"`
	FriendId string `json:"friendId"`
}

// GetFriendLocationsResponse defines model for GetFriendLocationsResponse.
type GetFriendLocationsResponse = []UserLocation

// LocationUpdate The location of a the current with a timestamp given in epoch millis
type LocationUpdate struct {
	Latitude  float32 `json:"latitude"`
	Longitude float32 `json:"longitude"`
	Timestamp int64   `json:"timestamp"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    *string `json:"email,omitempty"`
	FullName *string `json:"fullName,omitempty"`
	UserId   string  `json:"userId"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token string `json:"token"`
}

// RenameUserRequest defines model for RenameUserRequest.
type RenameUserRequest struct {
	NewName string `json:"newName"`
}

// UserLocation The location of a user with a timestamp given in epoch millis
type UserLocation struct {
	Latitude  float32 `json:"latitude"`
	Longitude float32 `json:"longitude"`
	Timestamp int64   `json:"timestamp"`
	UserId    string  `json:"userId"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	QueryString string `json:"queryString"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	FullName string `json:"fullName"`
	UserId   string `json:"userId"`
}

// DeleteFriendJSONRequestBody defines body for DeleteFriend for application/json ContentType.
type DeleteFriendJSONRequestBody = DeleteFriendRequest

// CreateFriendRequestJSONRequestBody defines body for CreateFriendRequest for application/json ContentType.
type CreateFriendRequestJSONRequestBody = FriendRequestRequest

// UpdateFriendRequestJSONRequestBody defines body for UpdateFriendRequest for application/json ContentType.
type UpdateFriendRequestJSONRequestBody = FriendResponseRequest

// LoginOrSignupJSONRequestBody defines body for LoginOrSignup for application/json ContentType.
type LoginOrSignupJSONRequestBody = LoginRequest

// RenameUserJSONRequestBody defines body for RenameUser for application/json ContentType.
type RenameUserJSONRequestBody = RenameUserRequest

// UpdateLocationJSONRequestBody defines body for UpdateLocation for application/json ContentType.
type UpdateLocationJSONRequestBody = LocationUpdate

// FindUsersJSONRequestBody defines body for FindUsers for application/json ContentType.
type FindUsersJSONRequestBody = UserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /friends)
	DeleteFriend(w http.ResponseWriter, r *http.Request)

	// (GET /friends)
	GetFriends(w http.ResponseWriter, r *http.Request)

	// (GET /friends/locations)
	GetLocationsOfFriends(w http.ResponseWriter, r *http.Request)

	// (POST /friends/request)
	CreateFriendRequest(w http.ResponseWriter, r *http.Request)

	// (GET /friends/requests)
	GetFriendRequests(w http.ResponseWriter, r *http.Request)

	// (POST /friends/response)
	UpdateFriendRequest(w http.ResponseWriter, r *http.Request)

	// (POST /login)
	LoginOrSignup(w http.ResponseWriter, r *http.Request)

	// (POST /me/rename)
	RenameUser(w http.ResponseWriter, r *http.Request)

	// (POST /updateLocation)
	UpdateLocation(w http.ResponseWriter, r *http.Request)

	// (POST /users)
	FindUsers(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (DELETE /friends)
func (_ Unimplemented) DeleteFriend(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /friends)
func (_ Unimplemented) GetFriends(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /friends/locations)
func (_ Unimplemented) GetLocationsOfFriends(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /friends/request)
func (_ Unimplemented) CreateFriendRequest(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /friends/requests)
func (_ Unimplemented) GetFriendRequests(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /friends/response)
func (_ Unimplemented) UpdateFriendRequest(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /login)
func (_ Unimplemented) LoginOrSignup(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /me/rename)
func (_ Unimplemented) RenameUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /updateLocation)
func (_ Unimplemented) UpdateLocation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /users)
func (_ Unimplemented) FindUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteFriend operation middleware
func (siw *ServerInterfaceWrapper) DeleteFriend(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFriend(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFriends operation middleware
func (siw *ServerInterfaceWrapper) GetFriends(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFriends(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLocationsOfFriends operation middleware
func (siw *ServerInterfaceWrapper) GetLocationsOfFriends(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLocationsOfFriends(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFriendRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateFriendRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFriendRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFriendRequests operation middleware
func (siw *ServerInterfaceWrapper) GetFriendRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFriendRequests(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateFriendRequest operation middleware
func (siw *ServerInterfaceWrapper) UpdateFriendRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFriendRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LoginOrSignup operation middleware
func (siw *ServerInterfaceWrapper) LoginOrSignup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginOrSignup(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RenameUser operation middleware
func (siw *ServerInterfaceWrapper) RenameUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenameUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateLocation operation middleware
func (siw *ServerInterfaceWrapper) UpdateLocation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLocation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindUsers operation middleware
func (siw *ServerInterfaceWrapper) FindUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/friends", wrapper.DeleteFriend)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/friends", wrapper.GetFriends)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/friends/locations", wrapper.GetLocationsOfFriends)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/friends/request", wrapper.CreateFriendRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/friends/requests", wrapper.GetFriendRequests)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/friends/response", wrapper.UpdateFriendRequest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.LoginOrSignup)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/me/rename", wrapper.RenameUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/updateLocation", wrapper.UpdateLocation)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.FindUsers)
	})

	return r
}

type UnauthorizedErrorResponse struct {
}

type DeleteFriendRequestObject struct {
	Body *DeleteFriendJSONRequestBody
}

type DeleteFriendResponseObject interface {
	VisitDeleteFriendResponse(w http.ResponseWriter) error
}

type DeleteFriend204Response struct {
}

func (response DeleteFriend204Response) VisitDeleteFriendResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteFriend401Response = UnauthorizedErrorResponse

func (response DeleteFriend401Response) VisitDeleteFriendResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteFrienddefaultResponse struct {
	StatusCode int
}

func (response DeleteFrienddefaultResponse) VisitDeleteFriendResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetFriendsRequestObject struct {
}

type GetFriendsResponseObject interface {
	VisitGetFriendsResponse(w http.ResponseWriter) error
}

type GetFriends200JSONResponse FindFriendsResponse

func (response GetFriends200JSONResponse) VisitGetFriendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFriends401Response = UnauthorizedErrorResponse

func (response GetFriends401Response) VisitGetFriendsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetFriendsdefaultResponse struct {
	StatusCode int
}

func (response GetFriendsdefaultResponse) VisitGetFriendsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetLocationsOfFriendsRequestObject struct {
}

type GetLocationsOfFriendsResponseObject interface {
	VisitGetLocationsOfFriendsResponse(w http.ResponseWriter) error
}

type GetLocationsOfFriends200JSONResponse GetFriendLocationsResponse

func (response GetLocationsOfFriends200JSONResponse) VisitGetLocationsOfFriendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLocationsOfFriends401Response = UnauthorizedErrorResponse

func (response GetLocationsOfFriends401Response) VisitGetLocationsOfFriendsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetLocationsOfFriendsdefaultResponse struct {
	StatusCode int
}

func (response GetLocationsOfFriendsdefaultResponse) VisitGetLocationsOfFriendsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type CreateFriendRequestRequestObject struct {
	Body *CreateFriendRequestJSONRequestBody
}

type CreateFriendRequestResponseObject interface {
	VisitCreateFriendRequestResponse(w http.ResponseWriter) error
}

type CreateFriendRequest200Response struct {
}

func (response CreateFriendRequest200Response) VisitCreateFriendRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateFriendRequest401Response = UnauthorizedErrorResponse

func (response CreateFriendRequest401Response) VisitCreateFriendRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateFriendRequestdefaultResponse struct {
	StatusCode int
}

func (response CreateFriendRequestdefaultResponse) VisitCreateFriendRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetFriendRequestsRequestObject struct {
}

type GetFriendRequestsResponseObject interface {
	VisitGetFriendRequestsResponse(w http.ResponseWriter) error
}

type GetFriendRequests200JSONResponse FindFriendsResponse

func (response GetFriendRequests200JSONResponse) VisitGetFriendRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFriendRequests401Response = UnauthorizedErrorResponse

func (response GetFriendRequests401Response) VisitGetFriendRequestsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetFriendRequestsdefaultResponse struct {
	StatusCode int
}

func (response GetFriendRequestsdefaultResponse) VisitGetFriendRequestsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UpdateFriendRequestRequestObject struct {
	Body *UpdateFriendRequestJSONRequestBody
}

type UpdateFriendRequestResponseObject interface {
	VisitUpdateFriendRequestResponse(w http.ResponseWriter) error
}

type UpdateFriendRequest200Response struct {
}

func (response UpdateFriendRequest200Response) VisitUpdateFriendRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateFriendRequest401Response = UnauthorizedErrorResponse

func (response UpdateFriendRequest401Response) VisitUpdateFriendRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateFriendRequestdefaultResponse struct {
	StatusCode int
}

func (response UpdateFriendRequestdefaultResponse) VisitUpdateFriendRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type LoginOrSignupRequestObject struct {
	Body *LoginOrSignupJSONRequestBody
}

type LoginOrSignupResponseObject interface {
	VisitLoginOrSignupResponse(w http.ResponseWriter) error
}

type LoginOrSignup200JSONResponse LoginResponse

func (response LoginOrSignup200JSONResponse) VisitLoginOrSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginOrSignupdefaultResponse struct {
	StatusCode int
}

func (response LoginOrSignupdefaultResponse) VisitLoginOrSignupResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type RenameUserRequestObject struct {
	Body *RenameUserJSONRequestBody
}

type RenameUserResponseObject interface {
	VisitRenameUserResponse(w http.ResponseWriter) error
}

type RenameUser200Response struct {
}

func (response RenameUser200Response) VisitRenameUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RenameUser401Response = UnauthorizedErrorResponse

func (response RenameUser401Response) VisitRenameUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RenameUserdefaultResponse struct {
	StatusCode int
}

func (response RenameUserdefaultResponse) VisitRenameUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UpdateLocationRequestObject struct {
	Body *UpdateLocationJSONRequestBody
}

type UpdateLocationResponseObject interface {
	VisitUpdateLocationResponse(w http.ResponseWriter) error
}

type UpdateLocation200Response struct {
}

func (response UpdateLocation200Response) VisitUpdateLocationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateLocation401Response = UnauthorizedErrorResponse

func (response UpdateLocation401Response) VisitUpdateLocationResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateLocationdefaultResponse struct {
	StatusCode int
}

func (response UpdateLocationdefaultResponse) VisitUpdateLocationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type FindUsersRequestObject struct {
	Body *FindUsersJSONRequestBody
}

type FindUsersResponseObject interface {
	VisitFindUsersResponse(w http.ResponseWriter) error
}

type FindUsers200JSONResponse []UserResponse

func (response FindUsers200JSONResponse) VisitFindUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindUsers401Response = UnauthorizedErrorResponse

func (response FindUsers401Response) VisitFindUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FindUsersdefaultResponse struct {
	StatusCode int
}

func (response FindUsersdefaultResponse) VisitFindUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (DELETE /friends)
	DeleteFriend(ctx context.Context, request DeleteFriendRequestObject) (DeleteFriendResponseObject, error)

	// (GET /friends)
	GetFriends(ctx context.Context, request GetFriendsRequestObject) (GetFriendsResponseObject, error)

	// (GET /friends/locations)
	GetLocationsOfFriends(ctx context.Context, request GetLocationsOfFriendsRequestObject) (GetLocationsOfFriendsResponseObject, error)

	// (POST /friends/request)
	CreateFriendRequest(ctx context.Context, request CreateFriendRequestRequestObject) (CreateFriendRequestResponseObject, error)

	// (GET /friends/requests)
	GetFriendRequests(ctx context.Context, request GetFriendRequestsRequestObject) (GetFriendRequestsResponseObject, error)

	// (POST /friends/response)
	UpdateFriendRequest(ctx context.Context, request UpdateFriendRequestRequestObject) (UpdateFriendRequestResponseObject, error)

	// (POST /login)
	LoginOrSignup(ctx context.Context, request LoginOrSignupRequestObject) (LoginOrSignupResponseObject, error)

	// (POST /me/rename)
	RenameUser(ctx context.Context, request RenameUserRequestObject) (RenameUserResponseObject, error)

	// (POST /updateLocation)
	UpdateLocation(ctx context.Context, request UpdateLocationRequestObject) (UpdateLocationResponseObject, error)

	// (POST /users)
	FindUsers(ctx context.Context, request FindUsersRequestObject) (FindUsersResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// DeleteFriend operation middleware
func (sh *strictHandler) DeleteFriend(w http.ResponseWriter, r *http.Request) {
	var request DeleteFriendRequestObject

	var body DeleteFriendJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFriend(ctx, request.(DeleteFriendRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFriend")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFriendResponseObject); ok {
		if err := validResponse.VisitDeleteFriendResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFriends operation middleware
func (sh *strictHandler) GetFriends(w http.ResponseWriter, r *http.Request) {
	var request GetFriendsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFriends(ctx, request.(GetFriendsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFriends")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFriendsResponseObject); ok {
		if err := validResponse.VisitGetFriendsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLocationsOfFriends operation middleware
func (sh *strictHandler) GetLocationsOfFriends(w http.ResponseWriter, r *http.Request) {
	var request GetLocationsOfFriendsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLocationsOfFriends(ctx, request.(GetLocationsOfFriendsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLocationsOfFriends")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLocationsOfFriendsResponseObject); ok {
		if err := validResponse.VisitGetLocationsOfFriendsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFriendRequest operation middleware
func (sh *strictHandler) CreateFriendRequest(w http.ResponseWriter, r *http.Request) {
	var request CreateFriendRequestRequestObject

	var body CreateFriendRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFriendRequest(ctx, request.(CreateFriendRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFriendRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFriendRequestResponseObject); ok {
		if err := validResponse.VisitCreateFriendRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFriendRequests operation middleware
func (sh *strictHandler) GetFriendRequests(w http.ResponseWriter, r *http.Request) {
	var request GetFriendRequestsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFriendRequests(ctx, request.(GetFriendRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFriendRequests")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFriendRequestsResponseObject); ok {
		if err := validResponse.VisitGetFriendRequestsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFriendRequest operation middleware
func (sh *strictHandler) UpdateFriendRequest(w http.ResponseWriter, r *http.Request) {
	var request UpdateFriendRequestRequestObject

	var body UpdateFriendRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFriendRequest(ctx, request.(UpdateFriendRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFriendRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFriendRequestResponseObject); ok {
		if err := validResponse.VisitUpdateFriendRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoginOrSignup operation middleware
func (sh *strictHandler) LoginOrSignup(w http.ResponseWriter, r *http.Request) {
	var request LoginOrSignupRequestObject

	var body LoginOrSignupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginOrSignup(ctx, request.(LoginOrSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginOrSignup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginOrSignupResponseObject); ok {
		if err := validResponse.VisitLoginOrSignupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RenameUser operation middleware
func (sh *strictHandler) RenameUser(w http.ResponseWriter, r *http.Request) {
	var request RenameUserRequestObject

	var body RenameUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RenameUser(ctx, request.(RenameUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RenameUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RenameUserResponseObject); ok {
		if err := validResponse.VisitRenameUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateLocation operation middleware
func (sh *strictHandler) UpdateLocation(w http.ResponseWriter, r *http.Request) {
	var request UpdateLocationRequestObject

	var body UpdateLocationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateLocation(ctx, request.(UpdateLocationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateLocation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateLocationResponseObject); ok {
		if err := validResponse.VisitUpdateLocationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindUsers operation middleware
func (sh *strictHandler) FindUsers(w http.ResponseWriter, r *http.Request) {
	var request FindUsersRequestObject

	var body FindUsersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindUsers(ctx, request.(FindUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindUsersResponseObject); ok {
		if err := validResponse.VisitFindUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
